/**
 * Replaces all occurrences of a substring in a string.
 *
 * @param {String} $string - The original string.
 * @param {String} $search - The substring to search for.
 * @param {String} $replace - The substring to replace with.
 * @return {String} - The modified string.
 */
@function str-replace($string, $search, $replace: "") {
  $index: string.index($string, $search);

  @while $index != null {
    $string: string.slice($string, 1, $index - 1) +
      $replace +
      string.slice($string, $index + string.length($search));
    $index: string.index($string, $search);
  }

  @return $string;
}

/**
 * Trims whitespace from the beginning and end of a string.
 *
 * @param {String} $string - The string to trim.
 * @return {String} - The trimmed string.
 */
@function str-trim($string) {
  $string: $string;

  @while string.length($string) >
    0 and
    string.index(" ", string.slice($string, 1, 1))
  {
    $string: string.slice($string, 2);
  }

  @while string.length($string) >
    0 and
    string.index(" ", string.slice($string, -1))
  {
    $string: string.slice($string, 1, -2);
  }

  @return $string;
}

/**
 * Splits a string into a list of substrings using a separator.
 *
 * @param {String} $string - The string to split.
 * @param {String} $separator - The separator string.
 * @return {List} - The list of substrings.
 */
@function str-split($string, $separator) {
  $result: ();
  $start: 1;
  $index: string.index($string, $separator);

  @while $index != null {
    $item: string.slice($string, $start, $index - 1);
    $result: list.append($result, $item);
    $start: $index + string.length($separator);
    $index: string.index(string.slice($string, $start), $separator);
    $index: if($index != null, $start + $index - 1, null);
  }

  $last_item: string.slice($string, $start);

  @if $last_item != "" {
    $result: list.append($result, $last_item);
  }

  @return $result;
}

/**
 * Parses a string of ruby-like key-value pairs into a map.
 * Format: [{"key1"=>"value1", "key2"=>"value2"}, {"key1"=>"value1","key2"=>"value2"}]
 *
 * @param {String} $string - The string of key-value pairs.
 * @return {Map} - The map of key-value pairs.
 */
@function parseObjectSettings($string) {
  $string: string.slice($string, 2, -2);
  $items: str-split($string, "}, {");
  $parsedItems: ();

  @each $item in $items {
    $item: str-replace($item, "{", "");
    $item: str-replace($item, "}", "");
    $item: str-trim($item);
    $pairs: str-split($item, ", ");
    $map: ();

    @each $pair in $pairs {
      $pairSplit: str-split($pair, "=>");
      $key: string.slice(str-trim(list.nth($pairSplit, 1)), 2, -2);
      $value: string.slice(str-trim(list.nth($pairSplit, 2)), 2, -2);
      $map: map.merge(
        $map,
        (
          string.quote($key): string.quote($value),
        )
      );
    }

    $parsedItems: list.append($parsedItems, $map);
  }

  @return $parsedItems;
}
